; ltrace.conf

; Argument types:
; +		== May vary (ie, is a returned value) (prefix)
; void
; int
; uint		== (unsigned int)
; octal		== (unsigned)			[written in octal]
; char
; addr		== (void *)			[unsigned, written in hexa]
; file		== (FILE *)						[TODO]
; format	== ((const char *), ...)	[printf() like]		[TODO]
; string	== (char *)
; stringN	== (char *)		[N>=0]	[show only up to (arg N) bytes]

; errno.h
addr __errno_location(void);

; fcntl.h
int open(string,int,octal);		; WARNING: 3rd argument may not be there

; getopt.h
int getopt_long(int,addr,string,addr,addr);
int getopt_long_only(int,addr,string,addr,addr);

; grp.h
void endgrent(void);
addr getgrnam(string);

; libintl.h
string bindtextdomain(string, string);
string textdomain(string);

; libio.h
int _IO_putc(char,file);

; locale.h
string setlocale(int, string);

; pwd.h
string getpass(string);
void endpwent(void);
addr getpwnam(string);

; readline/readline.h
string readline(string);

; signal.h
int kill(int,int);

; stdio.h
int fclose(file);
int ferror(file);
int fflush(file);
char fgetc(file);
addr fgets(+string, uint, file);
int fileno(file);
int fprintf(file,format);
int fputc(char,file);
int fputs(string,file);
uint fwrite(string,uint,uint,file);
int printf(format);
int sprintf(+string,format);

; stdlib.h
int atexit(addr);
addr calloc(uint, uint);
void exit(int);
void free(addr);
string getenv(string);
addr malloc(int);
void qsort(addr,uint,uint,addr);
addr realloc(addr,uint);

; string.h
string basename(string);
addr memchr(string,char,uint);
addr memcpy(addr,string3,uint);
addr memset(addr,char,int);
string rindex(string,char);
addr stpcpy(addr,string);
string strcat(string, string);
string strchr(string,char);
int strcmp(string,string);
addr strcpy(addr,string);
addr strdup(string);
string strerror(int);
int strncmp(string,string,int);
addr strncpy(addr,string3,uint);
string strrchr(string,char);
string strstr(string,string);

; sys/stat.h
int chmod(string,octal);
int mkfifo(string,octal);
octal umask(octal);

; sys/utsname.h
int uname(addr);

; sys/vfs.h
int statfs(string,addr);

; syslog.h
void closelog(void);
void openlog(string,int,int);
void syslog(int,format);

; term.h
int tputs(string, int, addr);

; time.h
int time(addr);

; unistd.h
int chown(string,int,int);
int close(int);
string crypt(string,addr);
int execlp(string,string,addr,addr,addr);
int fork(void);
string2 getcwd(addr,uint);
int geteuid(void);
int getegid(void);
int getgid(void);
int gethostname(+string2,int);
string getlogin(void);
int getpid(void);
int getuid(void);
int isatty(int);
int mkdir(string,octal);
int read(int, +string0, uint);
int rmdir(string);
int setgid(int);
int sethostname(+string2,int);
int setpgid(int,int);
int setuid(int);
uint sleep(uint);
int symlink(string,string);
int sync(void);
string ttyname(int);
int write(int, string3, uint);

; SYSCALLS
addr  SYS_brk(addr);
int   SYS_close(int);
int   SYS_execve(string,addr,addr);
void  SYS_exit(int);
int   SYS_fork(void);
int   SYS_getpid(void);
;addr SYS_mmap(addr,int,int,int,int,int);
int   SYS_munmap(addr,uint);
int   SYS_open(string,int,octal);
int   SYS_personality(uint);
int   SYS_read(int,+string0,uint);
octal SYS_umask(octal);
int   SYS_uname(addr);
int   SYS_write(int,string3,uint);
int   SYS_sync(void);
